@model cloudscribe.Core.Web.ViewModels.SiteUser.LoginViewModel
@inject ISiteContextResolver siteResolver
@inject ICoreThemeHelper themeHelper
@inject IStringLocalizer<CloudscribeCore> sr
@{
    var themeSettings = themeHelper.GetThemeSettings();
    ViewData["BodyClass"] = "account-section login-page";
    ViewData["SocialFormat"] = sr["log_in_using_your_account"];
    ViewData["SocialHeading"] = sr["use_existing_account_to_log_in"];
    var site = await siteResolver.ResolveSite(Context.Request.Host.Host, Context.Request.Path);

}
@section Meta {
    <meta name="robots" content="noindex" />
}
@if (!string.IsNullOrWhiteSpace(Model.RecaptchaSiteKey))
{
    <script src='https://www.google.com/recaptcha/api.js'></script>
}
@if (Model.UseInvisibleCaptcha)
{
    <script src="~/cr/js/cloudscribe-login-page.js"></script>
}
<h1>@ViewData["Title"]</h1>
@if (!string.IsNullOrWhiteSpace(Model.LoginInfoTop))
{
    <p>
        @Html.Raw(Model.LoginInfoTop)
    </p>
}
<div class="row">
    @if (!Model.DisableDbAuth)
    {
        <div class="col-md">
            <form id="login-form" asp-controller="Account" asp-action="Login" asp-route-returnurl='@ViewData["ReturnUrl"]' data-submit-once="true">
                <div asp-validation-summary="All" class="text-danger"></div>

                <div class="mb-3">
                    @if (Model.UseEmailForLogin)
                    {
                        <label class="form-label" asp-for="UserName">@sr["email_or_username"]</label>
                    }
                    else
                    {
                        <label class="form-label" asp-for="UserName">@sr["Username"]</label>
                    }
                    <div class="input-group">
                        <span class="input-group-text"><i class="@themeSettings.Icons.Username" aria-hidden="true"></i></span>
                        <input asp-for="UserName" class="form-control" />
                        <span asp-validation-for="UserName" class="invalid-feedback"></span>
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label" asp-for="Password">@sr["Password"]</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="@themeSettings.Icons.Password" aria-hidden="true"></i></span>
                        <input asp-for="Password" class="form-control" />
                        <span asp-validation-for="Password" class="invalid-feedback"></span>
                    </div>

                </div>
                @if (site.AllowPersistentLogin)
                {
                    <div class="mb-3">
                        <div class="form-check">
                            <input asp-for="RememberMe" class="form-check-input" />
                            <label asp-for="RememberMe" class="form-check-label">@sr["remember_me"] </label>
                        </div>
                    </div>
                }
                @if (!string.IsNullOrWhiteSpace(Model.RecaptchaSiteKey) && !Model.UseInvisibleCaptcha)
                {
                    <div class="mb-3">
                        <div class="g-recaptcha" data-sitekey="@Model.RecaptchaSiteKey"></div>
                        @Html.ValidationMessage("recaptchaerror", new { @class = "text-danger" })
                    </div>
                }
                <div class="mb-3">

                    @if (!string.IsNullOrWhiteSpace(Model.RecaptchaSiteKey) && Model.UseInvisibleCaptcha)
                    {
                        <button class="btn btn-primary g-recaptcha" data-sitekey="@Model.RecaptchaSiteKey" data-callback='onCaptchaSubmit' data-enabled-text='@sr["log_in"]' data-disabled-text='@sr["working"]'>@sr["log_in"]</button>
                    }
                    else
                    {
                        <button name="submit" type="submit" class="btn btn-primary" data-enabled-text='@sr["log_in"]' data-disabled-text='@sr["working"]'>@sr["log_in"]</button>
                    }


                </div>
            </form>

            @if (site.AllowNewRegistration)
            {
                <p>
                    <a asp-action="Register" asp-route-returnurl="@ViewData["ReturnUrl"]">@sr["register_as_new_user"]</a>
                </p>
            }
            <p>
                <a asp-action="ForgotPassword">@sr["forgot_your_password"]</a>
            </p>
        </div>
    }

    @{
        var LoginProviders = Model.ExternalAuthenticationList.ToList();
        if (LoginProviders.Count > 0)
        {
            <div class="col-md">
                <partial name="SocialLoginPartial" model="@LoginProviders" />
            </div>
        }
    }

</div>
@if (!string.IsNullOrWhiteSpace(Model.LoginInfoBottom))
{
    <p>
        @Html.Raw(Model.LoginInfoBottom)
    </p>
}
@section Scripts {
    <script src="~/cr/js/jquery.validate.min.js"></script>
    <script src="~/cr/js/jquery.validate.unobtrusive.min.js"></script>
    <script src="~/cr/js/cloudscribe-validation-requiredwhen.min.js"></script>
    <script src="~/cr/js/unobtrusive-validation-bs4.min.js"></script>
    <script src="~/cr/js/jquery.validate.hooks.min.js"></script>
    <script src="~/cr/js/jqueryvaildation.submitonce-unobtrusive.min.js"></script>
}
