let sessionState = { expiresAt: null, warningShown: !1, alertThreshold: 60, autoLogoutEnabled: !1, lastServerCheck: 0, checkOnlyWhenClose: !0 }; function startSessionMonitoring() { setInterval((() => { if (!sessionState.autoLogoutEnabled) return; const e = Date.now(), s = sessionState.expiresAt - e, n = Math.round(s / 1e3); n < 120 && n > 0 && e - sessionState.lastServerCheck > 1e4 && (checkActualSessionTime(), sessionState.lastServerCheck = e), n <= sessionState.alertThreshold && n > 0 && !sessionState.warningShown && ($("#sessionExpiryWarning").modal("show"), sessionState.warningShown = !0, console.log("Session expiry warning shown")), sessionState.warningShown && n > 0 && $("#sessionExpiryWarningSeconds").text(n), n <= 0 && (console.log("Session expired - redirecting to logout"), window.location.href = $("#sessionExpiry").data("url-target")) }), 1e3) } function checkActualSessionTime() { $.ajax({ url: "/Account/GetActualSessionTime", cache: !1, success: function (e) { if (e.expired) console.log("Server reports session expired"), window.location.href = $("#sessionExpiry").data("url-target"); else if (e.remainingSeconds > sessionState.alertThreshold) { var s = Math.round((sessionState.expiresAt - Date.now()) / 1e3); e.remainingSeconds > s + 5 ? (sessionState.expiresAt = Date.now() + 1e3 * e.remainingSeconds, sessionState.warningShown = !1, $("#sessionExpiryWarning").modal("hide"), console.log("Session extended by server activity - remaining: " + e.remainingSeconds + "s"), localStorage.setItem("sessionExtended", JSON.stringify({ expiresAt: sessionState.expiresAt, timestamp: Date.now() }))) : (sessionState.expiresAt = Date.now() + 1e3 * e.remainingSeconds, console.log("Session time confirmed from server - remaining: " + e.remainingSeconds + "s")) } }, error: function () { console.error("Failed to check session status - network error") } }) } function initializeSessionTracking() { const e = $("#sessionExpiry")[0]; if (!e) return void console.log("Auto-logout element not found - feature not enabled"); const s = Number(e.dataset.secondsLeft) || 0; s > 0 ? (sessionState.autoLogoutEnabled = !0, sessionState.expiresAt = Date.now() + 1e3 * s, sessionState.alertThreshold = Number(e.dataset.alertThreshold) || 60, console.log("Auto-logout enabled - expires in " + s + " seconds"), startSessionMonitoring()) : (console.log("Auto-logout is disabled (timeout is zero or null)"), sessionState.autoLogoutEnabled = !1) } function btnManualLogout(e) { var s = document.getElementById("logoutForm"); s && s.submit(), e && e.preventDefault() } function hookupLogoutButton() { var e = document.getElementById("btnSessionLogOut"); e && e.addEventListener("click", btnManualLogout, !1) } window.addEventListener("storage", (function (e) { if ("sessionExtended" === e.key && e.newValue) { var s = JSON.parse(e.newValue); s.expiresAt > sessionState.expiresAt && (sessionState.expiresAt = s.expiresAt, sessionState.warningShown = !1, $("#sessionExpiryWarning").modal("hide"), console.log("Session state updated from another tab")) } })), window.addEventListener("DOMContentLoaded", (() => { initializeSessionTracking(); const e = $("#sessionExpiry")[0]; if (e) { const s = e.dataset.urlTarget; window.location.href.includes(s.split("/").pop()) && btnManualLogout() } $("#sessionKeepAlive").click((function () { $.ajax({ url: "/Account/RemainingSessionTime", cache: !1, success: function (e) { "number" == typeof e && e > 0 && (sessionState.expiresAt = Date.now() + 1e3 * e, sessionState.warningShown = !1, $("#sessionExpiryWarning").modal("hide"), console.log("Session manually extended - remaining: " + e + "s"), localStorage.setItem("sessionExtended", JSON.stringify({ expiresAt: sessionState.expiresAt, timestamp: Date.now() }))) }, error: function () { console.error("Failed to extend session") } }) })), hookupLogoutButton() }));