function doCountdownPromise(e, t, o, n) { t = 1e3 * t || 1e4; let i = new Date; const s = () => { i = new Date, console.log("Session timer reset due to user activity") };["mousemove", "keydown", "touchstart", "scroll"].forEach((e => document.addEventListener(e, s))); const r = function (s, a) { let l = e - (new Date - i) / 1e3; if (o > 0 && l > o && ($("#sessionExpiryWarning").modal("hide"), n = !1), o > 0 && l <= o) { let o = $("#sessionExpiryWarning"); if (o && parseInt(l) >= 0 && $("#sessionExpiryWarningSeconds").text(parseInt(l)), !n) { let s = t; t = 1e3, o.modal("show"), $("#sessionKeepAlive").off().click((() => { let n = o[0].dataset.urlKeepAlive + "?t=" + Math.random(); pollForKeepAlive(getRemainingTimePromise, n, 5e3, 800).then((r => { r - l > 10 ? (e = r, i = new Date, t = s, o.modal("hide")) : pollForKeepAlive(getRemainingTimePromise, n, 5e3, 800).then((n => { n - l > 10 && (e = n, i = new Date, t = s, o.modal("hide")) })).catch((() => { })) })).catch((() => { })) })), hookupLogoutButton(), n = !0 } } l < -2 ? s() : setTimeout(r, t, s, a) }; return new Promise(r) } function getRemainingTimePromise(e) { return $.ajax({ url: e }) } function pollForKeepAlive(e, t, o, n) { let i = Date.now() + (o || 5e3); const s = function (o, r) { e(t).then((e => { e ? o(e) : Date.now() < i ? setTimeout(s, n, o, r) : r(new Error("session checker timed out")) })).catch((() => { Date.now() < i ? setTimeout(s, n, o, r) : r(new Error("session checker failed")) })) }; return new Promise(s) } function btnManualLogout(e) { let t = document.getElementById("logoutForm"); t && t.submit(), e && e.preventDefault() } function hookupLogoutButton() { let e = document.getElementById("btnSessionLogOut"); e && e.addEventListener("click", btnManualLogout, !1) } function AutoLogoutNotification(e, t, o) { $.ajax({ url: t, method: "GET", data: { userid: o }, success: function (t) { t.redirect && (window.location.href = e), console.log("User details received:", t) }, error: function (e, t, o) { console.error("Error fetching user details:", o) } }) } window.addEventListener("DOMContentLoaded", (() => { let e = $("#sessionExpiry")[0], t = e.dataset.urlKeepAlive, o = e.dataset.urlTarget, n = e.dataset.urlJax, i = String(e.dataset.userid), s = Number(e.dataset.alertThreshold) || 60, r = Number(e.dataset.pollingInterval) || 5; getRemainingTimePromise(t).then((t => { let a = Number(e.dataset.secondsLeft) || Number(t) || 0; window.location.href === o && btnManualLogout(), a > 0 && doCountdownPromise(a, r, s, !1).then((() => { AutoLogoutNotification(o, n, i) })).catch((() => { })) })) })), window.addEventListener("load", (() => { const e = document.getElementById("sessionExpiryWarning"); if (!e || !e.dataset.urlKeepAlive) return; pollForKeepAlive(getRemainingTimePromise, e.dataset.urlKeepAlive, 5e3, 800).then((t => { t && !isNaN(t) && (e.dataset.secondsLeft = Number(t), console.log("Session secondsLeft populated via polling:", t)) })).catch((e => { console.warn("Polling failed to retrieve session time:", e) })) }));