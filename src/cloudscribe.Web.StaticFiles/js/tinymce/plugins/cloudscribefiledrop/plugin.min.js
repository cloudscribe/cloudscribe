(function() {
    "use strict";

    // Resolving TinyMCE PluginManager
    tinymce.util.Tools.resolve("tinymce.PluginManager").add("cloudscribefiledrop", (editor) => {
		var theEditor = editor;
		var xsrfToken = $('[name="__RequestVerificationToken"]:first').val();

		const addCommand = (editor) => {
            editor.on("drop", () => {
                saveDroppedImage(editor);
            });
        };
		
		const saveDroppedImage = (editor) => {
            event = event || window.event;
			var files = event.dataTransfer.files || event.target.files;
			var dropFileUploadUrl = editor.options.get('dropFileUploadUrl');

			if (files && files.length > 0 && dropFileUploadUrl) {
				event.preventDefault();
				event.stopPropagation ();
				
				for(var i = 0; i < files.length; i++) {
					var name = files[i].name; //usually this will always be image.png
					var baseName = name.substring(0, name.lastIndexOf('.')) || name;
					var ext = name.substring(name.lastIndexOf('.') + 1).toLowerCase();
					var date = new Date().toISOString().replace(/:|\./g, '-').substring(0, 21);
					var newName = baseName + '_' + date + '.' + ext;
					var file = renameFile(files[i], newName);

					uploadFile(file, dropFileUploadUrl);
				}
			}
        };
		
		// Initialize the command and UI for the plugin
        addCommand(editor);

        return {};
		
		function renameFile(originalFile, newName) {
			return new File([originalFile], newName, {
				type: originalFile.type,
				lastModified: originalFile.lastModified,
			});
		}
		
		function uploadFile(file, uploadUrl) {
			switch(file.type){
				case "image/jpeg":
				case "image/jpg":
				case "image/gif":
				case "image/png":
				case "image/svg+xml":

				var formData = new FormData();
				formData.append("__RequestVerificationToken", xsrfToken);
				formData.append(file.name, file);

				$.ajax({
					type:"POST",
					processData: false,
					contentType: false,
					dataType: "json",
					url: uploadUrl,
					data: formData,
					success: uploadSuccess,
					complete: ajaxComplete
				});

				break;
			}
		}
		
		function ajaxComplete() {
			resetup();
		}

		function uploadSuccess( data, textStatus, jqXHR ) {
			try {
				if(data[0].errorMessage) { alert(data[0].errorMessage); return; }

				if(data[0].resizedUrl) {
					theEditor.insertContent( "<img src='" + data[0].resizedUrl + "' alt=' ' />" );
				} else {
					theEditor.insertContent( "<img src='" + data[0].originalUrl + "' alt=' ' />" );
				}
			} catch(err) {
				try {
					if(data.files[0].resizedUrl) {
						theEditor.insertContent( "<a href='" + data[0].originalUrl +"'><img src='" + data[0].resizedUrl + "' alt=' ' /></a>" );
					} else {
						theEditor.insertContent( "<img src='" + data[0].originalUrl + "' alt=' ' />" );
					}
				} catch(err2) {
					//console.log("err2: ", err2);
				}
			}
		}

		//A 'feature' in Tiny (seems to be because it uses iframes) means that if a user has used drag and drop for an image
		//we need to remove all of the tiny instances and re-instate them whilst re-binding the default event for drop.
		async function resetup() {
			var $elems = $('textarea[data-tinymce]').toArray();

			if ($elems) {
				for (elem of $elems) {
					var config = {};
					var tinyInstance = $(elem).data('tinymce');
					var configPath = $(elem).data('tinymce-config-url');
					var dropFileUploadUrl = $(elem).data('tinymce-config-dropfileuploadurl');
					var dropFileXsrfToken = $('[name="__RequestVerificationToken"]:first').val();;
			
					if (tinyInstance) {
						tinyInstance = 'textarea[data-tinymce=' + tinyInstance + ']';
					} else {
						tinyInstance = 'textarea[data-tinymce=""]';
					}
					if (configPath) { config.customConfig = configPath; }

					if (configPath) {
						var configTiny;
				
						await fetch(configPath)
						.then((res) => res.json())
						.then((text) => {
							configTiny = text;
							tinymce.remove(tinyInstance);

							tinymce.init({
								selector: tinyInstance,
								setup: (editor) => {
									editor.on('drop', (e) => {
										return true;
									});
								},
								init_instance_callback: (editor) => {
									editor.options.register('dropFileUploadUrl', {
										processor: 'string'
									});
									editor.options.register('dropFileXsrfToken', {
										processor: 'string'
									});
									editor.options.set('dropFileUploadUrl', dropFileUploadUrl);
									editor.options.set('dropFileXsrfToken', dropFileXsrfToken);
								},
								...configTiny
							});
						})
						.catch((e) => console.error(e));
					}
				}
			}
		}
	});
})();