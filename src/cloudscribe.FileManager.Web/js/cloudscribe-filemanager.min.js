!function () { var e = { headers: { "X-CSRFToken": $("#fmconfig").data("anti-forgery-token") }, treeDataApiUrl: $("#fmconfig").data("filetree-url"), allowedFiles: $("#fmconfig").data("allowed-file-extensions"), uploadApiUrl: $("#fmconfig").data("upload-url"), downloadFileApiUrl: $("#fmconfig").data("file-download-url"), createFolderApiUrl: $("#fmconfig").data("create-folder-url"), deleteFolderApiUrl: $("#fmconfig").data("delete-folder-url"), renameFolderApiUrl: $("#fmconfig").data("rename-folder-url"), deleteFileApiUrl: $("#fmconfig").data("delete-file-url"), renameFileApiUrl: $("#fmconfig").data("rename-file-url"), canDelete: $("#fmconfig").data("can-delete"), canSelect: $("#fmconfig").data("can-select"), canDownload: $("#fmconfig").data("can-download"), emptyPreviewUrl: $("#fmconfig").data("empty-preview-url"), rootVirtualPath: $("#fmconfig").data("root-virtual-path"), rootButton: $("#btnRoot"), fileSelectorButton: $("#btnSelector"), fileSelectorButtonAlt: $("#btnSelectorAlt"), deleteFolderPromptButton: $("#btnDeleteFolderPrompt"), deleteFolderButton: $("#btnDeleteFolder"), renameFolderPromptButton: $("#btnRenameFolderPrompt"), renameFolderButton: $("#btnRenameFolder"), selectForCropButton: $("#btnSelectForCrop"), deleteFilePromptButton: $("#btnDeleteFilePrompt"), deleteFileButton: $("#btnDeleteFile"), renameFilePromptButton: $("#btnRenameFilePrompt"), renameFileButton: $("#btnRenameFile"), selectedFileInput: $("#fileSelection"), newFolderButton: $("#btnCreateFolder"), progressUI: $("#progress"), uploadTab: $("#tab2"), cropTab: $("#tab3"), treeData: [], selectedFileList: [], setCropImageFromServer: function () { var t = e.selectedFileInput.val(); $("#image").attr("src", t), $("#cropCurrentDirLabel").html(t.substring(0, t.lastIndexOf("/"))), $("#cropCurrentDir").val(t.substring(0, t.lastIndexOf("/"))); var a = t.substring(t.lastIndexOf("/")); $("#croppedFileName").val(a), $("#origFileName").val(a), $("#lnkCrop")[0].click() }, clearServerCropImage: function () { $("#image").attr("src", e.emptyPreviewUrl), $("#croppedFileName").val(""), $("#origFileName").val("") }, setPreview: function (t) { switch (e.clearPreview(), t.mediaType) { case "audio": $("#divAudioPreview").show(), $("#audio-source").attr("src", t.virtualPath), $("#audio-source").attr("type", t.mimeType), e.audioPlayer = new Plyr("#audio-player", {}); break; case "video": $("#divVideoPreview").show(), $("#video-source").attr("src", t.virtualPath), $("#video-source").attr("type", t.mimeType), e.videoPlayer = new Plyr("#video-player", {}); break; case "image": $("#divPreview").show(), $("#filePreview").attr("src", t.virtualPath + "?" + performance.now()) }e.uploadTab.hide(), e.selectForCropButton.show(); var a, r = document.getElementById("divFileSizeWarning"); if (r.style.display = "none", $("#divFileSize").removeClass("alert-danger"), Number.isInteger(t.size)) { var o = new Number(t.size); if (o > 1e6) a = o / 1e6 + " MB", $("#divFileSize").addClass("alert-danger"), "image" == t.mediaType && (r.style.display = "block"); else a = o / 1e3 + " KB" } $("#divFileSize").text(a) }, clearPreview: function () { $("#filePreview").attr("src", e.emptyPreviewUrl), $("#fileCropPreview").attr("src", e.emptyPreviewUrl), $("#croppedFileName").val(""), e.uploadTab.show(), e.selectForCropButton.hide(), e.clearServerCropImage(), e.videoPlayer && e.videoPlayer.destroy(), e.audioPlayer && e.audioPlayer.destroy(), $("#divVideoPreview").hide(), $("#video-source").attr("src", ""), $("#video-source").attr("type", ""), $("#divAudioPreview").hide(), $("#audio-source").attr("src", ""), $("#audio-source").attr("type", ""), $("#divFileSize").text(""), document.getElementById("divFileSizeWarning").style.display = "none" }, setCurrentDirectory: function (t) { $("#newFolderCurrentDir").val(t), $("#hdnCurrentVirtualPath").val(t), $("#uploadCurrentDir").val(t), $("#cropCurrentDir").val(t), $("#cropCurrentDirLabel").html(t + "/"), $("#currentFolder").html(t), $("#folderToDelete").val(t), $("#folderToRename").val(t), e.showFolderTools() }, clearCurrentDirectory: function () { $("#newFolderCurrentDir").val(e.rootVirtualPath), $("#hdnCurrentVirtualPath").val(e.rootVirtualPath), $("#uploadCurrentDir").val(e.rootVirtualPath), $("#currentFolder").html(e.rootVirtualPath), $("#folderToDelete").val(""), $("#folderToRename").val(""), e.hideFolderTools() }, setCurrentFile: function (t, a) { e.selectedFileInput.val(t), $("#newFolderCurrentDir").val(t.substring(0, t.lastIndexOf("/"))), $("#fileToRename").val(t), $("#fileToDelete").val(t), $("#fileToMove").val(t), a && ($("#newFileNameSegment").val(a), e.downloadFileApiUrl && e.downloadFileApiUrl.length > 0 && $("#lnkDownloadFile").attr("href", e.downloadFileApiUrl + "?fileToDownload=" + t)), e.showFileTools() }, clearCurrentFile: function () { e.selectedFileInput.val(""), $("#fileToRename").val(""), $("#fileToDelete").val(""), $("#newFileNameSegment").val(""), $("#fileToMove").val(""), e.hideFileTools(), e.clearPreview() }, backToRoot: function () { e.clearCurrentFile(), e.clearCurrentDirectory(), e.clearPreview(), e.setCurrentDirectory(e.rootVirtualPath), e.loadTree() }, showFolderTools: function () { e.canDelete && ($("#hdnCurrentVirtualPath").val() != e.rootVirtualPath && ($("#frmDeleteFolder").show(), $("#frmRenameFolder").show())); $("#frmNewFolder").show() }, hideFolderTools: function () { $("#frmDeleteFolder").hide(), $("#frmRenameFolder").hide(), $("#frmNewFolder").hide() }, showFileTools: function () { e.canDelete && ($("#frmDeleteFile").show(), $("#frmRenameFile").show(), $("#frmMoveFile").show(), e.downloadFileApiUrl && $("#lnkDownloadFile").show()) }, hideFileTools: function () { $("#frmDeleteFile").hide(), $("#frmRenameFile").hide(), $("#lnkDownloadFile").hide(), $("#frmMoveFile").hide() }, notify: function (e, t) { $("#alert_placeholder").html('<div class="alert ' + t + '"><button type="button" data-bs-dismiss="alert" class="btn-close me-2" style="float:right" aria-label="Close"></button><span>' + e + "</span></div>") }, addFileToList: function (e, t, a, r) { var o = $("<span class='far fa-trash-alt' aria-role='button' title='Remove'></span>").click((function () { e.files.splice(a, 1), t = e.files, $("#fileList li").eq(a).remove(), 0 === t.length && $("#fileList").html("") })), l = $("<li>", { text: r.name }).append("&nbsp;").append(o); $("#fileList ul").append(l) }, addErrorToList: function (e, t) { var a = $("<li>", { text: t.ErrorMessage }); $("#fileList ul").append(a) }, createFolder: function () { var t = $("#frmNewFolder").serializeArray(); return $.ajax({ method: "POST", url: e.createFolderApiUrl, headers: e.headers, data: t }).done((function (t) { t.succeeded ? ($("#newFolderCurrentDir").val() === e.rootVirtualPath ? e.loadTree() : e.reloadSubTree(), $("#newFolderName").val("")) : e.notify(t.message, "alert-danger") })).fail((function () { e.notify("An error occured", "alert-danger") })), !1 }, deleteFolderPrompt: function () { var t = $("#folderToDelete").val(); if (t === e.rootVirtualPath) return !1; var a = "Are you sure you want to permanently delete the folder " + t + " and any files or folders below it?"; return $("#deleteFolderModalBody").html(a), $("#mdlDeleteFolder").modal("show"), !1 }, deleteFolder: function () { $("#mdlDeleteFolder").modal("hide"); var t = $("#folderToDelete").val(); if (t === e.rootVirtualPath) return !1; var a = $("#frmDeleteFolder").serializeArray(); return $.ajax({ method: "POST", url: e.deleteFolderApiUrl, headers: e.headers, data: a }).done((function (a) { a.succeeded ? (e.removeNode(t), e.clearCurrentDirectory()) : e.notify(a.message, "alert-danger") })).fail((function () { e.notify("An error occured", "alert-danger") })), !1 }, renameFolderPrompt: function () { var t = $("#folderToRename").val(); if (t === e.rootVirtualPath) return !1; var a = "Are you sure you want to rename the folder " + t + "?"; return $("#renameFolderModalBody").html(a), $("#mdlRenameFolder").modal("show"), !1 }, renameFolder: function () { $("#mdlRenameFolder").modal("hide"); var t = $("#folderToRename").val(); if (t === e.rootVirtualPath) return !1; var a = $("#frmRenameFolder").serializeArray(); return $.ajax({ method: "POST", url: e.renameFolderApiUrl, headers: e.headers, data: a }).done((function (a) { if (a.succeeded) { var r = $("#tree").treeview(!0), o = r.findNodes(t, "id"); if (o) { var l = r.getParents(o); l && l.length > 0 ? e.reloadSubTree(l[0].id) : e.loadTree() } $("#newNameSegment").val(""), e.clearCurrentDirectory() } else e.notify(a.message, "alert-danger") })).fail((function () { e.notify("An error occured", "alert-danger") })), !1 }, deleteFilePrompt: function () { var e = $("#fileToDelete").val(); if ("" === e) return !1; var t = "Are you sure you want to permanently delete the file " + e + "?"; return $("#deleteFileModalBody").html(t), $("#mdlDeleteFile").modal("show"), !1 }, deleteFile: function () { $("#mdlDeleteFile").modal("hide"); var t = $("#fileToDelete").val(); if ("" === t) return !1; if (t === e.rootVirtualPath) return !1; var a = $("#frmDeleteFile").serializeArray(); return $.ajax({ method: "POST", url: e.deleteFileApiUrl, headers: e.headers, data: a }).done((function (a) { a.succeeded ? (e.removeNode(t), e.clearCurrentFile()) : e.notify(a.message, "alert-danger") })).fail((function () { e.notify("An error occured", "alert-danger") })), !1 }, renameFilePrompt: function () { var e = $("#fileToRename").val(); if ("" === e) return !1; var t = "Are you sure you want to rename the file " + e + "?"; return $("#renameFileModalBody").html(t), $("#mdlRenameFile").modal("show"), !1 }, renameFile: function () { $("#mdlRenameFile").modal("hide"); var t = $("#fileToRename").val(); if ("" === t) return !1; if (t === e.rootVirtualPath) return !1; var a = $("#frmRenameFile").serializeArray(); return $.ajax({ method: "POST", url: e.renameFileApiUrl, headers: e.headers, data: a }).done((function (a) { if (a.succeeded) { var r = $("#tree").treeview(!0), o = r.findNodes(t, "id"); if (o) { var l = r.getParents(o); l && l.length > 0 && e.reloadSubTree(l[0].id) } e.clearCurrentFile() } else e.notify(a.message, "alert-danger") })).fail((function () { e.notify("An error occured", "alert-danger") })), !1 }, selectfile: function () { var t = $("#fmconfig").data("ckfunc"), a = e.selectedFileInput.val(), r = window.frameElement && null !== window.frameElement.getAttribute("data-wysiwyg-instance"); 0 === a.length ? e.notify("Please select a file in the browse tab", "alert-danger") : window.parent && window.parent.FileSelectCallback ? window.parent.FileSelectCallback(a) : r ? window.parent && "function" == typeof window.parent.handleMessageFromChild && window.parent.handleMessageFromChild({ url: a, filename: "image_name", instance: window.frameElement.getAttribute("data-wysiwyg-instance") }) : (window.opener.CKEDITOR.tools.callFunction(t, a), window.close()) }, removeNode: function (e) { var t = $("#tree").treeview(!0), a = t.findNodes(e, "id"); t.removeNode(a, { silent: !0 }) }, reloadSubTree: function (t) { var a = $("#tree").treeview(!0), r = t || $("#uploadCurrentDir").val(); if (0 !== r.length && r !== e.rootVirtualPath) { var o = a.findNodes(r, "id"); if (o.length > 0) { try { a.collapseNode(o, { silent: !0, ignoreChildren: !1 }) } catch (e) { } var l = o[0], i = { text: l.text, id: l.id, type: l.type, icon: l.icon, expandedIcon: l.expandedIcon, virtualPath: l.virtualPath, nodes: [], lazyLoad: !0 }; try { a.updateNode(l, i, { silent: !0 }), o = a.findNodes(r, "id"), a.expandNode(o, { silent: !0, ignoreChildren: !1 }) } catch (e) { } } else alert("node not found") } else e.loadTree() }, loadTree: function () { $("#tree").treeview({ dataUrl: { method: "GET", dataType: "json", url: e.treeDataApiUrl, cache: !1 }, nodeIcon: "far fa-folder mr-1", collapseIcon: "fas fa-minus", emptyIcon: "fa", expandIcon: "fas fa-plus", loadingIcon: "far fa-hourglass", levels: 2, onhoverColor: "#F5F5F5", highlightSelected: !0, showBorder: !0, showCheckbox: !1, showIcon: !0, wrapNodeText: !1, lazyLoad: function (t, a) { $.ajax({ dataType: "json", url: e.treeDataApiUrl + "&virtualStartPath=" + t.virtualPath }).done((function (e) { a(e) })), t.lazyLoaded = !0 }, onNodeSelected: function (t, a) { $("#divPreview").hide(), a.canPreview ? e.setPreview(a) : e.clearPreview(), "d" === a.type ? (e.setCurrentDirectory(a.virtualPath), e.clearCurrentFile(), e.hideFileTools()) : (e.hideFolderTools(), e.setCurrentFile(a.virtualPath, a.text)) }, onNodeUnselected: function (t, a) { a.lazyLoaded && (a.lazyLoaded = !1), "d" === a.type ? e.hideFolderTools() : e.hideFileTools() } }) }, setupFileLoader: function () { $("#pnlFiles").fileupload({ fileInput: $("#fileupload"), url: e.uploadApiUrl, headers: e.headers, dataType: "json", autoUpload: !0, singleFileUploads: !0, dropZone: $("#dropZone"), pasteZone: $("#dropZone"), add: function (t, a) { $("#fileList").empty(), $("#fileList").append($("<ul class='filelist'></ul>")); for (var r = e.allowedFiles.split("|"), o = new RegExp("([a-zA-Z0-9؀-ۿs_\\.-:])+(" + r.join("|") + ")$"), l = 0, i = a.files.length; l < i;)!1 === o.test(a.files[l].name.toLowerCase()) && (e.notify(a.files[l].name + " not allowed", "alert-danger"), a.files.splice(l, 1), i = a.files.length, l = -1), l++; e.selectedFileList = e.selectedFileList.concat(a.files), a.files.length > 0 && a.process().done((function () { a.submit() })) }, done: function (t, a) { a.files = [], e.selectedFileList = [], $("#fileupload").val(null), $("#progress").hide(), $("#fileList").empty(), fileListuploader = [], $("#fileList").append($("<ul class='filelist file-errors'></ul>")); for (var r = 0; r < a.length;)a[r].errorMessage && (!0, addErrorToList(r, a[r])), r++ }, progressall: function (t, a) { var r = parseInt(a.loaded / a.total * 100, 10); e.progressUI.show(), $("#progress .progress-bar").css("width", r + "%"), 100 === r && (e.notify("File upload success.", "alert-success"), setTimeout((function () { e.reloadSubTree() }), 3e3)) }, fail: function (t, a) { $("#progress .progress-bar").css("width", "0%"), e.progressUI.hide(), e.notify("Something went wrong, possibly the file is larger than allowed by server configuration.", "alert-danger") } }).prop("disabled", !$.support.fileInput).parent().addClass($.support.fileInput ? void 0 : "disabled"), $("#fileupload").bind("fileuploadsubmit", (function (e, t) { return t.formData = $("#frmUpload").serializeArray(), !0 })) }, init: function () { $(document).bind("drop dragover", (function (e) { e.preventDefault() })), this.progressUI.hide(), this.loadTree(), this.setupFileLoader(), this.newFolderButton.on("click", e.createFolder), this.fileSelectorButton.on("click", e.selectfile), this.fileSelectorButtonAlt.on("click", e.selectfile), this.deleteFolderPromptButton.on("click", e.deleteFolderPrompt), this.deleteFolderButton.on("click", e.deleteFolder), this.renameFolderPromptButton.on("click", e.renameFolderPrompt), this.renameFolderButton.on("click", e.renameFolder), this.deleteFilePromptButton.on("click", e.deleteFilePrompt), this.deleteFileButton.on("click", e.deleteFile), this.renameFilePromptButton.on("click", e.renameFilePrompt), this.renameFileButton.on("click", e.renameFile), this.selectForCropButton.on("click", e.setCropImageFromServer), this.setCurrentDirectory(this.rootVirtualPath), this.rootButton.on("click", e.backToRoot), "false" !== e.canSelect && !1 !== e.canSelect || (this.fileSelectorButton.hide(), this.fileSelectorButtonAlt.hide()) } }; e.init(); var t = { uploadUrl: $("#fmconfig").data("upload-url"), URL: window.URL || window.webkitURL, console: window.console || { log: function () { } }, image: $("#image"), saveLocalButton: $("#btnSaveLocal"), uploadCropButton: $("#btnUploadCrop"), croppedFileName: $("#croppedFileName"), chkConstrainCrop: $("#chkContrainWidthOfCrop"), cropMaxWidthInput: $("#cropMaxWidth"), dataX: $("#dataX"), dataY: $("#dataY"), dataHeight: $("#dataHeight"), dataWidth: $("#dataWidth"), dataRotate: $("#dataRotate"), dataScaleX: $("#dataScaleX"), dataScaleY: $("#dataScaleY"), outputHeight: $("#dataNewHeight"), outputWidth: $("#dataNewWidth"), initialised: !1, setup: function () { var a, r = { aspectRatio: 16 / 9, preview: ".img-preview", crop: function (a) { t.dataX.val(Math.round(a.x)), t.dataY.val(Math.round(a.y)); var r = Math.round(a.height), o = Math.round(a.width); t.dataHeight.val(r), t.dataWidth.val(o), t.dataRotate.val(a.rotate), t.dataScaleX.val(a.scaleX), t.dataScaleY.val(a.scaleY); var l = Math.round(t.cropMaxWidthInput.val()); if (t.chkConstrainCrop.is(":checked") && o > l) { t.outputWidth.val(l); var i = t.getCropAspectRatio(), n = parseInt(l / i); t.outputHeight.val(n), t.setCroppedFileName(l, n) } else t.outputHeight.val(r), t.outputWidth.val(o), t.setCroppedFileName(Math.round(a.width), Math.round(a.height)); $.isFunction(document.createElement("canvas").getContext) && (t.image.attr("src") === e.emptyPreviewUrl ? t.uploadCropButton.prop("disabled", !0) : t.uploadCropButton.prop("disabled", !1)) } }, o = t.image.attr("src"); $('[data-bs-toggle="tooltip"]').tooltip(), t.image.on({ ready: function (e) { }, cropstart: function (e) { }, cropmove: function (e) { }, cropend: function (e) { }, crop: function (e) { }, zoom: function (e) { } }).cropper(r), $.isFunction(document.createElement("canvas").getContext) || t.uploadCropButton.prop("disabled", !0), void 0 === document.createElement("cropper").style.transition && ($('button[data-method="rotate"]').prop("disabled", !0), $('button[data-method="scale"]').prop("disabled", !0)), void 0 === t.saveLocalButton[0].download && t.saveLocalButton.addClass("disabled"), 0 == t.initialised && $(".docs-toggles").on("change", "input", (function () { var e, a, o = $(this), l = o.attr("name"), i = o.prop("type"); t.image.data("cropper") && ("checkbox" === i ? (r[l] = o.prop("checked"), e = t.image.cropper("getCropBoxData"), a = t.image.cropper("getCanvasData"), r.ready = function () { t.image.cropper("setCropBoxData", e), t.image.cropper("setCanvasData", a) }) : "radio" === i && (r[l] = o.val()), t.image.cropper("destroy").cropper(r)) })), $("#btnUploadCropped").on("click", t.uploadCroppedImage), t.outputWidth.on("blur", (function () { var e = t.getCropAspectRatio(), a = parseInt(t.outputWidth.val()), r = parseInt(t.outputHeight.val()), o = parseInt(a / e); Math.abs(o - r) > 1 && (t.outputHeight.val(o), t.setCroppedFileName(a, o)) })), t.outputHeight.on("blur", (function () { var e = t.getCropAspectRatio(), a = parseInt(t.outputHeight.val()), r = parseInt(t.outputWidth.val()), o = parseInt(a * e); Math.abs(o - r) > 1 && (t.outputWidth.val(o), t.setCroppedFileName(o, a)) })), t.chkConstrainCrop.change((function () { if ($(this).is(":checked")) { var e = Math.round(t.cropMaxWidthInput.val()); if (parseInt(t.dataWidth.val()) > e) { t.outputWidth.val(e); parseInt(t.dataHeight.val()); var a = t.getCropAspectRatio(), r = parseInt(e / a); t.outputHeight.val(r) } } else t.outputHeight.val(t.dataHeight.val()), t.outputWidth.val(t.dataWidth.val()) })), $(".docs-buttons").on("click", "[data-method]", (function () { var e, r, l = $(this), i = l.data(); if (!l.prop("disabled") && !l.hasClass("disabled") && t.image.data("cropper") && i.method) { if (void 0 !== (i = $.extend({}, i)).target && (e = $(i.target), void 0 === i.option)) try { i.option = JSON.parse(e.val()) } catch (e) { console.log(e.message) } switch ("rotate" === i.method && t.image.cropper("clear"), void 0 === i.option && "getCroppedCanvas" === i.method && (i.option = { width: t.outputWidth.val(), height: t.outputHeight.val() }), r = t.image.cropper(i.method, i.option, i.secondOption), "rotate" === i.method && t.image.cropper("crop"), i.method) { case "scaleX": case "scaleY": $(this).data("option", -i.option); break; case "getCroppedCanvas": r && ($("#getCroppedCanvasModal").modal().find(".modal-body").html(r), $("#getCroppedCanvasModal").modal("show"), t.saveLocalButton.hasClass("disabled") || t.saveLocalButton.attr("href", r.toDataURL("image/jpeg"))); break; case "destroy": a && (URL.revokeObjectURL(a), a = "", t.image.attr("src", o)) }if ($.isPlainObject(r) && e) try { e.val(JSON.stringify(r)) } catch (e) { console.log(e.message) } } })), $(document.body).on("keydown", (function (e) { if (t.image.data("cropper") && !(this.scrollTop > 300)) switch (e.which) { case 37: e.preventDefault(), t.image.cropper("move", -1, 0); break; case 38: e.preventDefault(), t.image.cropper("move", 0, -1); break; case 39: e.preventDefault(), t.image.cropper("move", 1, 0); break; case 40: e.preventDefault(), t.image.cropper("move", 0, 1) } })); var l = $("#inputImage"); t.URL ? l.change((function () { var e, o = this.files; t.image.data("cropper") && o && o.length && (e = o[0], /^image\/\w+$/.test(e.type) ? (a && URL.revokeObjectURL(a), a = t.URL.createObjectURL(e), $("#origFileName").val(e.name.toLowerCase()), t.croppedFileName.val(e.name.toLowerCase()), t.image.cropper("destroy").attr("src", a).cropper(r), l.val("")) : window.alert("Please choose an image file.")) })) : l.prop("disabled", !0).parent().addClass("disabled"), t.initialised = !0 }, tearDown: function () { $("#image").data("cropper") && $("#image").cropper("destroy") }, setCroppedFileName: function (e, a) { var r = $("#origFileName").val(), o = r.substring(0, r.lastIndexOf(".")), l = r.substring(r.lastIndexOf(".")); t.croppedFileName.val(o + "-" + e + "x" + a + l), t.saveLocalButton.attr("download", t.croppedFileName.val()) }, getCropAspectRatio: function () { var e = $("#image").cropper("getCropBoxData"); return e.width / e.height }, uploadCroppedImage: function () { var a = { width: t.outputWidth.val(), height: t.outputHeight.val() }; return $("#image").cropper("getCroppedCanvas", a).toBlob((function (a) { var r = new FormData; r.append(t.croppedFileName.val(), a); var o = $("#frmUploadCropped").serializeArray(); $.each(o, (function (e, t) { r.append(t.name, t.value) })), $.ajax({ method: "POST", url: e.uploadApiUrl, headers: e.headers, data: r, processData: !1, contentType: !1 }).done((function (t, a, r) { if (t[0].errorMessage) e.notify(t[0].errorMessage, "alert-danger"); else { var o = $("#cropCurrentDir").val(); o === e.rootVirtualPath ? e.loadTree() : e.reloadSubTree(o), $("#getCroppedCanvasModal").modal("hide"), e.notify("Cropped image upload succeeded", "alert-success") } })).fail((function (t, a, r) { e.notify(r, "alert-danger") })) })), !1 } }; window.fileManager = e, $('a[data-bs-toggle="tab"]').on("shown.bs.tab", (function (e) { if ("#tabCrop" === $(e.target).attr("href")) t.setup(); else { var a = $(e.relatedTarget).attr("href"); if (a) "tabCrop" === a.replace(/^.*?(#|$)/, "") && t.tearDown() } })) }();