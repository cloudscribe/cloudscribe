!function () { var a = { headers: { "X-CSRFToken": $("#fmconfig").data("anti-forgery-token") }, treeDataApiUrl: $("#fmconfig").data("filetree-url"), allowedFiles: $("#fmconfig").data("allowed-file-extensions"), uploadApiUrl: $("#fmconfig").data("upload-url"), downloadFileApiUrl: $("#fmconfig").data("file-download-url"), createFolderApiUrl: $("#fmconfig").data("create-folder-url"), deleteFolderApiUrl: $("#fmconfig").data("delete-folder-url"), renameFolderApiUrl: $("#fmconfig").data("rename-folder-url"), deleteFileApiUrl: $("#fmconfig").data("delete-file-url"), renameFileApiUrl: $("#fmconfig").data("rename-file-url"), canDelete: $("#fmconfig").data("can-delete"), canSelect: $("#fmconfig").data("can-select"), canDownload: $("#fmconfig").data("can-download"), emptyPreviewUrl: $("#fmconfig").data("empty-preview-url"), rootVirtualPath: $("#fmconfig").data("root-virtual-path"), rootButton: $("#btnRoot"), fileSelectorButton: $("#btnSelector"), fileSelectorButtonAlt: $("#btnSelectorAlt"), deleteFolderPromptButton: $("#btnDeleteFolderPrompt"), deleteFolderButton: $("#btnDeleteFolder"), renameFolderPromptButton: $("#btnRenameFolderPrompt"), renameFolderButton: $("#btnRenameFolder"), selectForCropButton: $("#btnSelectForCrop"), deleteFilePromptButton: $("#btnDeleteFilePrompt"), deleteFileButton: $("#btnDeleteFile"), renameFilePromptButton: $("#btnRenameFilePrompt"), renameFileButton: $("#btnRenameFile"), selectedFileInput: $("#fileSelection"), newFolderButton: $("#btnCreateFolder"), progressUI: $("#progress"), uploadTab: $("#tab2"), cropTab: $("#tab3"), treeData: [], selectedFileList: [], setCropImageFromServer: function () { var b = a.selectedFileInput.val(); $("#image").attr("src", b), $("#cropCurrentDirLabel").html(b.substring(0, b.lastIndexOf("/"))), $("#cropCurrentDir").val(b.substring(0, b.lastIndexOf("/"))); var c = b.substring(b.lastIndexOf("/")); $("#croppedFileName").val(c), $("#origFileName").val(c), $("#lnkCrop")[0].click() }, clearServerCropImage: function () { $("#image").attr("src", a.emptyPreviewUrl), $("#croppedFileName").val(""), $("#origFileName").val("") }, setPreview: function (b) { switch (a.clearPreview(), b.mediaType) { case "audio": $("#divAudioPreview").show(), $("#audio-source").attr("src", b.virtualPath), $("#audio-source").attr("type", b.mimeType), a.audioPlayer = new Plyr("#audio-player", {}); break; case "video": $("#divVideoPreview").show(), $("#video-source").attr("src", b.virtualPath), $("#video-source").attr("type", b.mimeType), a.videoPlayer = new Plyr("#video-player", {}); break; case "image": $("#divPreview").show(), $("#filePreview").attr("src", b.virtualPath) }a.uploadTab.hide(), a.selectForCropButton.show(); var c, e = document.getElementById("divFileSizeWarning"); if (e.style.display = "none", $("#divFileSize").removeClass("alert-danger"), Number.isInteger(b.size)) { var d = new Number(b.size); d > 1e6 ? (c = d / 1e6 + " MB", $("#divFileSize").addClass("alert-danger"), "image" == b.mediaType && (e.style.display = "block")) : c = d / 1e3 + " KB" } $("#divFileSize").text(c) }, clearPreview: function () { $("#filePreview").attr("src", a.emptyPreviewUrl), $("#fileCropPreview").attr("src", a.emptyPreviewUrl), $("#croppedFileName").val(""), a.uploadTab.show(), a.selectForCropButton.hide(), a.clearServerCropImage(), a.videoPlayer && a.videoPlayer.destroy(), a.audioPlayer && a.audioPlayer.destroy(), $("#divVideoPreview").hide(), $("#video-source").attr("src", ""), $("#video-source").attr("type", ""), $("#divAudioPreview").hide(), $("#audio-source").attr("src", ""), $("#audio-source").attr("type", ""), $("#divFileSize").text(""), document.getElementById("divFileSizeWarning").style.display = "none" }, setCurrentDirectory: function (b) { $("#newFolderCurrentDir").val(b), $("#hdnCurrentVirtualPath").val(b), $("#uploadCurrentDir").val(b), $("#cropCurrentDir").val(b), $("#cropCurrentDirLabel").html(b + "/"), $("#currentFolder").html(b), $("#folderToDelete").val(b), $("#folderToRename").val(b), a.showFolderTools() }, clearCurrentDirectory: function () { $("#newFolderCurrentDir").val(a.rootVirtualPath), $("#hdnCurrentVirtualPath").val(a.rootVirtualPath), $("#uploadCurrentDir").val(a.rootVirtualPath), $("#currentFolder").html(a.rootVirtualPath), $("#folderToDelete").val(""), $("#folderToRename").val(""), a.hideFolderTools() }, setCurrentFile: function (b, c) { a.selectedFileInput.val(b), $("#newFolderCurrentDir").val(b.substring(0, b.lastIndexOf("/"))), $("#fileToRename").val(b), $("#fileToDelete").val(b), c && ($("#newFileNameSegment").val(c), a.downloadFileApiUrl && a.downloadFileApiUrl.length > 0 && $("#lnkDownloadFile").attr("href", a.downloadFileApiUrl + "?fileToDownload=" + b)), a.showFileTools() }, clearCurrentFile: function () { a.selectedFileInput.val(""), $("#fileToRename").val(""), $("#fileToDelete").val(""), $("#newFileNameSegment").val(""), a.hideFileTools(), a.clearPreview() }, backToRoot: function () { a.clearCurrentFile(), a.clearCurrentDirectory(), a.clearPreview(), a.setCurrentDirectory(a.rootVirtualPath), a.loadTree() }, showFolderTools: function () { a.canDelete && $("#hdnCurrentVirtualPath").val() != a.rootVirtualPath && ($("#frmDeleteFolder").show(), $("#frmRenameFolder").show()), $("#frmNewFolder").show() }, hideFolderTools: function () { $("#frmDeleteFolder").hide(), $("#frmRenameFolder").hide(), $("#frmNewFolder").hide() }, showFileTools: function () { a.canDelete && ($("#frmDeleteFile").show(), $("#frmRenameFile").show(), a.downloadFileApiUrl && $("#lnkDownloadFile").show()) }, hideFileTools: function () { $("#frmDeleteFile").hide(), $("#frmRenameFile").hide(), $("#lnkDownloadFile").hide() }, notify: function (a, b) { $("#alert_placeholder").html('<div class="alert ' + b + '"><button type="button" data-bs-dismiss="alert" class="btn-close me-2" style="float:right" aria-label="Close"></button><span>' + a + "</span></div>") }, addFileToList: function (d, e, f, a) { var b = $("<span class='far fa-trash-alt' aria-role='button' title='Remove'></span>").click(function () { d.files.splice(f, 1), e = d.files, $("#fileList li").eq(f).remove(), 0 === e.length && $("#fileList").html("") }), c = $("<li>", { text: a.name }).append("&nbsp;").append(b); $("#fileList ul").append(c) }, addErrorToList: function (c, a) { var b = $("<li>", { text: a.ErrorMessage }); $("#fileList ul").append(b) }, createFolder: function () { var b = $("#frmNewFolder").serializeArray(); return $.ajax({ method: "POST", url: a.createFolderApiUrl, headers: a.headers, data: b }).done(function (b) { b.succeeded ? ($("#newFolderCurrentDir").val() === a.rootVirtualPath ? a.loadTree() : a.reloadSubTree(), $("#newFolderName").val("")) : a.notify(b.message, "alert-danger") }).fail(function () { a.notify("An error occured", "alert-danger") }), !1 }, deleteFolderPrompt: function () { var b = $("#folderToDelete").val(); return b !== a.rootVirtualPath && ($("#deleteFolderModalBody").html("Are you sure you want to permanently delete the folder " + b + " and any files or folders below it?"), $("#mdlDeleteFolder").modal("show"), !1) }, deleteFolder: function () { $("#mdlDeleteFolder").modal("hide"); var b = $("#folderToDelete").val(); if (b === a.rootVirtualPath) return !1; var c = $("#frmDeleteFolder").serializeArray(); return $.ajax({ method: "POST", url: a.deleteFolderApiUrl, headers: a.headers, data: c }).done(function (c) { c.succeeded ? (a.removeNode(b), a.clearCurrentDirectory()) : a.notify(c.message, "alert-danger") }).fail(function () { a.notify("An error occured", "alert-danger") }), !1 }, renameFolderPrompt: function () { var b = $("#folderToRename").val(); return b !== a.rootVirtualPath && ($("#renameFolderModalBody").html("Are you sure you want to rename the folder " + b + "?"), $("#mdlRenameFolder").modal("show"), !1) }, renameFolder: function () { $("#mdlRenameFolder").modal("hide"); var b = $("#folderToRename").val(); if (b === a.rootVirtualPath) return !1; var c = $("#frmRenameFolder").serializeArray(); return $.ajax({ method: "POST", url: a.renameFolderApiUrl, headers: a.headers, data: c }).done(function (d) { if (d.succeeded) { var e = $("#tree").treeview(!0), f = e.findNodes(b, "id"); if (f) { var c = e.getParents(f); c && c.length > 0 ? a.reloadSubTree(c[0].id) : a.loadTree() } $("#newNameSegment").val(""), a.clearCurrentDirectory() } else a.notify(d.message, "alert-danger") }).fail(function () { a.notify("An error occured", "alert-danger") }), !1 }, deleteFilePrompt: function () { var a = $("#fileToDelete").val(); return "" !== a && ($("#deleteFileModalBody").html("Are you sure you want to permanently delete the file " + a + "?"), $("#mdlDeleteFile").modal("show"), !1) }, deleteFile: function () { $("#mdlDeleteFile").modal("hide"); var b = $("#fileToDelete").val(); if ("" === b || b === a.rootVirtualPath) return !1; var c = $("#frmDeleteFile").serializeArray(); return $.ajax({ method: "POST", url: a.deleteFileApiUrl, headers: a.headers, data: c }).done(function (c) { c.succeeded ? (a.removeNode(b), a.clearCurrentFile()) : a.notify(c.message, "alert-danger") }).fail(function () { a.notify("An error occured", "alert-danger") }), !1 }, renameFilePrompt: function () { var a = $("#fileToRename").val(); return "" !== a && ($("#renameFileModalBody").html("Are you sure you want to rename the file " + a + "?"), $("#mdlRenameFile").modal("show"), !1) }, renameFile: function () { $("#mdlRenameFile").modal("hide"); var b = $("#fileToRename").val(); if ("" === b || b === a.rootVirtualPath) return !1; var c = $("#frmRenameFile").serializeArray(); return $.ajax({ method: "POST", url: a.renameFileApiUrl, headers: a.headers, data: c }).done(function (d) { if (d.succeeded) { var e = $("#tree").treeview(!0), f = e.findNodes(b, "id"); if (f) { var c = e.getParents(f); c && c.length > 0 && a.reloadSubTree(c[0].id) } a.clearCurrentFile() } else a.notify(d.message, "alert-danger") }).fail(function () { a.notify("An error occured", "alert-danger") }), !1 }, selectfile: function () { var c = $("#fmconfig").data("ckfunc"), b = a.selectedFileInput.val(); 0 === b.length ? a.notify("Please select a file in the browse tab", "alert-danger") : window.parent && window.parent.FileSelectCallback ? window.parent.FileSelectCallback(b) : (window.opener.CKEDITOR.tools.callFunction(c, b), window.close()) }, removeNode: function (b) { var a = $("#tree").treeview(!0), c = a.findNodes(b, "id"); a.removeNode(c, { silent: !0 }) }, reloadSubTree: function (f) { var c = $("#tree").treeview(!0), e = f || $("#uploadCurrentDir").val(); if (0 === e.length || e === a.rootVirtualPath) { a.loadTree(); return } var d = c.findNodes(e, "id"); if (d.length > 0) { try { c.collapseNode(d, { silent: !0, ignoreChildren: !1 }) } catch (h) { } var b = d[0], g = { text: b.text, id: b.id, type: b.type, icon: b.icon, expandedIcon: b.expandedIcon, virtualPath: b.virtualPath, nodes: [], lazyLoad: !0 }; try { c.updateNode(b, g, { silent: !0 }), d = c.findNodes(e, "id"), c.expandNode(d, { silent: !0, ignoreChildren: !1 }) } catch (i) { } } else alert("node not found") }, loadTree: function () { $("#tree").treeview({ dataUrl: { method: "GET", dataType: "json", url: a.treeDataApiUrl, cache: !1 }, nodeIcon: "far fa-folder mr-1", collapseIcon: "fas fa-minus", emptyIcon: "fa", expandIcon: "fas fa-plus", loadingIcon: "far fa-hourglass", levels: 2, onhoverColor: "#F5F5F5", highlightSelected: !0, showBorder: !0, showCheckbox: !1, showIcon: !0, wrapNodeText: !1, lazyLoad: function (b, c) { $.ajax({ dataType: "json", url: a.treeDataApiUrl + "&virtualStartPath=" + b.virtualPath }).done(function (a) { c(a) }), b.lazyLoaded = !0 }, onNodeSelected: function (c, b) { $("#divPreview").hide(), b.canPreview ? a.setPreview(b) : a.clearPreview(), "d" === b.type ? (a.setCurrentDirectory(b.virtualPath), a.clearCurrentFile(), a.hideFileTools()) : (a.hideFolderTools(), a.setCurrentFile(b.virtualPath, b.text)) }, onNodeUnselected: function (c, b) { b.lazyLoaded && (b.lazyLoaded = !1), "d" === b.type ? a.hideFolderTools() : a.hideFileTools() } }) }, setupFileLoader: function () { $("#pnlFiles").fileupload({ fileInput: $("#fileupload"), url: a.uploadApiUrl, headers: a.headers, dataType: "json", autoUpload: !0, singleFileUploads: !0, dropZone: $("#dropZone"), pasteZone: $("#dropZone"), add: function (g, b) { $("#fileList").empty(), $("#fileList").append($("<ul class='filelist'></ul>")); for (var e = a.allowedFiles.split("|"), f = new RegExp("([a-zA-Z0-9\u0600-\u06FFs_\\.-:])+(" + e.join("|") + ")$"), c = 0, d = b.files.length; c < d;)!1 === f.test(b.files[c].name.toLowerCase()) && (a.notify(b.files[c].name + " not allowed", "alert-danger"), b.files.splice(c, 1), d = b.files.length, c = -1), c++; a.selectedFileList = a.selectedFileList.concat(b.files), b.files.length > 0 && b.process().done(function () { b.submit() }) }, done: function (d, c) { c.files = [], a.selectedFileList = [], $("#fileupload").val(null), $("#progress").hide(), $("#fileList").empty(), fileListuploader = [], $("#fileList").append($("<ul class='filelist file-errors'></ul>")); for (var b = 0; b < c.length;)c[b].errorMessage && addErrorToList(b, c[b]), b++ }, progressall: function (d, b) { var c = parseInt(b.loaded / b.total * 100, 10); a.progressUI.show(), $("#progress .progress-bar").css("width", c + "%"), 100 === c && (a.notify("File upload success.", "alert-success"), setTimeout(function () { a.reloadSubTree() }, 3e3)) }, fail: function (b, c) { $("#progress .progress-bar").css("width", "0%"), a.progressUI.hide(), a.notify("Something went wrong, possibly the file is larger than allowed by server configuration.", "alert-danger") } }).prop("disabled", !$.support.fileInput).parent().addClass($.support.fileInput ? void 0 : "disabled"), $("#fileupload").bind("fileuploadsubmit", function (b, a) { return a.formData = $("#frmUpload").serializeArray(), !0 }) }, init: function () { $(document).bind("drop dragover", function (a) { a.preventDefault() }), this.progressUI.hide(), this.loadTree(), this.setupFileLoader(), this.newFolderButton.on("click", a.createFolder), this.fileSelectorButton.on("click", a.selectfile), this.fileSelectorButtonAlt.on("click", a.selectfile), this.deleteFolderPromptButton.on("click", a.deleteFolderPrompt), this.deleteFolderButton.on("click", a.deleteFolder), this.renameFolderPromptButton.on("click", a.renameFolderPrompt), this.renameFolderButton.on("click", a.renameFolder), this.deleteFilePromptButton.on("click", a.deleteFilePrompt), this.deleteFileButton.on("click", a.deleteFile), this.renameFilePromptButton.on("click", a.renameFilePrompt), this.renameFileButton.on("click", a.renameFile), this.selectForCropButton.on("click", a.setCropImageFromServer), this.setCurrentDirectory(this.rootVirtualPath), this.rootButton.on("click", a.backToRoot), ("false" === a.canSelect || !1 === a.canSelect) && (this.fileSelectorButton.hide(), this.fileSelectorButtonAlt.hide()) } }; a.init(); var b = { uploadUrl: $("#fmconfig").data("upload-url"), URL: window.URL || window.webkitURL, console: window.console || { log: function () { } }, image: $("#image"), saveLocalButton: $("#btnSaveLocal"), uploadCropButton: $("#btnUploadCrop"), croppedFileName: $("#croppedFileName"), chkConstrainCrop: $("#chkContrainWidthOfCrop"), cropMaxWidthInput: $("#cropMaxWidth"), dataX: $("#dataX"), dataY: $("#dataY"), dataHeight: $("#dataHeight"), dataWidth: $("#dataWidth"), dataRotate: $("#dataRotate"), dataScaleX: $("#dataScaleX"), dataScaleY: $("#dataScaleY"), outputHeight: $("#dataNewHeight"), outputWidth: $("#dataNewWidth"), initialised: !1, setup: function () { var e, d = { aspectRatio: 16 / 9, preview: ".img-preview", crop: function (c) { b.dataX.val(Math.round(c.x)), b.dataY.val(Math.round(c.y)); var f = Math.round(c.height), e = Math.round(c.width); b.dataHeight.val(f), b.dataWidth.val(e), b.dataRotate.val(c.rotate), b.dataScaleX.val(c.scaleX), b.dataScaleY.val(c.scaleY); var d = Math.round(b.cropMaxWidthInput.val()); if (b.chkConstrainCrop.is(":checked") && e > d) { b.outputWidth.val(d); var g = parseInt(d / b.getCropAspectRatio()); b.outputHeight.val(g), b.setCroppedFileName(d, g) } else b.outputHeight.val(f), b.outputWidth.val(e), b.setCroppedFileName(Math.round(c.width), Math.round(c.height)); $.isFunction(document.createElement("canvas").getContext) && (b.image.attr("src") === a.emptyPreviewUrl ? b.uploadCropButton.prop("disabled", !0) : b.uploadCropButton.prop("disabled", !1)) } }, f = b.image.attr("src"); $('[data-bs-toggle="tooltip"]').tooltip(), b.image.on({ ready: function (a) { }, cropstart: function (a) { }, cropmove: function (a) { }, cropend: function (a) { }, crop: function (a) { }, zoom: function (a) { } }).cropper(d), $.isFunction(document.createElement("canvas").getContext) || b.uploadCropButton.prop("disabled", !0), void 0 === document.createElement("cropper").style.transition && ($('button[data-method="rotate"]').prop("disabled", !0), $('button[data-method="scale"]').prop("disabled", !0)), void 0 === b.saveLocalButton[0].download && b.saveLocalButton.addClass("disabled"), !1 == b.initialised && $(".docs-toggles").on("change", "input", function () { var f, g, a = $(this), c = a.attr("name"), e = a.prop("type"); b.image.data("cropper") && ("checkbox" === e ? (d[c] = a.prop("checked"), f = b.image.cropper("getCropBoxData"), g = b.image.cropper("getCanvasData"), d.ready = function () { b.image.cropper("setCropBoxData", f), b.image.cropper("setCanvasData", g) }) : "radio" === e && (d[c] = a.val()), b.image.cropper("destroy").cropper(d)) }), $("#btnUploadCropped").on("click", b.uploadCroppedImage), b.outputWidth.on("blur", function () { var d = b.getCropAspectRatio(), c = parseInt(b.outputWidth.val()), e = parseInt(b.outputHeight.val()), a = parseInt(c / d); Math.abs(a - e) > 1 && (b.outputHeight.val(a), b.setCroppedFileName(c, a)) }), b.outputHeight.on("blur", function () { var d = b.getCropAspectRatio(), c = parseInt(b.outputHeight.val()), e = parseInt(b.outputWidth.val()), a = parseInt(c * d); Math.abs(a - e) > 1 && (b.outputWidth.val(a), b.setCroppedFileName(a, c)) }), b.chkConstrainCrop.change(function () { if ($(this).is(":checked")) { var a = Math.round(b.cropMaxWidthInput.val()); if (parseInt(b.dataWidth.val()) > a) { b.outputWidth.val(a), parseInt(b.dataHeight.val()); var c = parseInt(a / b.getCropAspectRatio()); b.outputHeight.val(c) } } else b.outputHeight.val(b.dataHeight.val()), b.outputWidth.val(b.dataWidth.val()) }), $(".docs-buttons").on("click", "[data-method]", function () { var d, c, g = $(this), a = g.data(); if (!(g.prop("disabled") || g.hasClass("disabled")) && b.image.data("cropper") && a.method) { if (void 0 !== (a = $.extend({}, a)).target && (d = $(a.target), void 0 === a.option)) try { a.option = JSON.parse(d.val()) } catch (h) { console.log(h.message) } switch ("rotate" === a.method && b.image.cropper("clear"), void 0 === a.option && "getCroppedCanvas" === a.method && (a.option = { width: b.outputWidth.val(), height: b.outputHeight.val() }), c = b.image.cropper(a.method, a.option, a.secondOption), "rotate" === a.method && b.image.cropper("crop"), a.method) { case "scaleX": case "scaleY": $(this).data("option", -a.option); break; case "getCroppedCanvas": c && ($("#getCroppedCanvasModal").modal().find(".modal-body").html(c), $("#getCroppedCanvasModal").modal("show"), b.saveLocalButton.hasClass("disabled") || b.saveLocalButton.attr("href", c.toDataURL("image/jpeg"))); break; case "destroy": e && (URL.revokeObjectURL(e), e = "", b.image.attr("src", f)) }if ($.isPlainObject(c) && d) try { d.val(JSON.stringify(c)) } catch (i) { console.log(i.message) } } }), $(document.body).on("keydown", function (a) { if (b.image.data("cropper") && !(this.scrollTop > 300)) switch (a.which) { case 37: a.preventDefault(), b.image.cropper("move", -1, 0); break; case 38: a.preventDefault(), b.image.cropper("move", 0, -1); break; case 39: a.preventDefault(), b.image.cropper("move", 1, 0); break; case 40: a.preventDefault(), b.image.cropper("move", 0, 1) } }); var c = $("#inputImage"); b.URL ? c.change(function () { var a, f = this.files; b.image.data("cropper") && f && f.length && (a = f[0], /^image\/\w+$/.test(a.type) ? (e && URL.revokeObjectURL(e), e = b.URL.createObjectURL(a), $("#origFileName").val(a.name.toLowerCase()), b.croppedFileName.val(a.name.toLowerCase()), b.image.cropper("destroy").attr("src", e).cropper(d), c.val("")) : window.alert("Please choose an image file.")) }) : c.prop("disabled", !0).parent().addClass("disabled"), b.initialised = !0 }, tearDown: function () { $("#image").data("cropper") && $("#image").cropper("destroy") }, setCroppedFileName: function (c, d) { var a = $("#origFileName").val(), e = a.substring(0, a.lastIndexOf(".")), f = a.substring(a.lastIndexOf(".")); b.croppedFileName.val(e + "-" + c + "x" + d + f), b.saveLocalButton.attr("download", b.croppedFileName.val()) }, getCropAspectRatio: function () { var a = $("#image").cropper("getCropBoxData"); return a.width / a.height }, uploadCroppedImage: function () { var c = { width: b.outputWidth.val(), height: b.outputHeight.val() }; return $("#image").cropper("getCroppedCanvas", c).toBlob(function (d) { var c = new FormData; c.append(b.croppedFileName.val(), d); var e = $("#frmUploadCropped").serializeArray(); $.each(e, function (b, a) { c.append(a.name, a.value) }), $.ajax({ method: "POST", url: a.uploadApiUrl, headers: a.headers, data: c, processData: !1, contentType: !1 }).done(function (b, d, e) { if (b[0].errorMessage) a.notify(b[0].errorMessage, "alert-danger"); else { var c = $("#cropCurrentDir").val(); c === a.rootVirtualPath ? a.loadTree() : a.reloadSubTree(c), $("#getCroppedCanvasModal").modal("hide"), a.notify("Cropped image upload succeeded", "alert-success") } }).fail(function (c, d, b) { a.notify(b, "alert-danger") }) }), !1 } }; $('a[data-bs-toggle="tab"]').on("shown.bs.tab", function (a) { if ("#tabCrop" === $(a.target).attr("href")) b.setup(); else { var c = $(a.relatedTarget).attr("href"); c && "tabCrop" === c.replace(/^.*?(#|$)/, "") && b.tearDown() } }) }()